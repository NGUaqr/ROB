)
if (length(convert$MGI.symbol) == 0) {
failed_genes <<- c(failed_genes, genes)
message("转换失败的基因列表: ", paste(failed_genes, collapse = ", "))
return(genes)  # 转换失败，返回原始基因名
} else {
return(convert$MGI.symbol)
}
}, error = function(e) {
failed_genes <<- c(failed_genes, genes)
message("转换失败的基因列表: ", paste(failed_genes, collapse = ", "))
return(genes)  # 转换失败，返回原始基因名
})
}
}
#### 疾病上下调基因集的获取 ####
get_disease_genes <- function(disease_file,
N = NULL,
LogFC = 0) {
disease_data <- read.table(disease_file, header = T,row.names = 1)
if (!is.null(N)) {
up_genes <- rownames(head(disease_data[order(-disease_data[, 1]), , drop = FALSE], N))
down_genes <- rownames(head(disease_data[order(disease_data[, 1]), , drop = FALSE], N))}
if (!is.null(LogFC)) {
up_genes <- rownames(disease_data[disease_data[,1] > LogFC, ,drop=F])
down_genes <- rownames(disease_data[disease_data[,1] < LogFC, ,drop=F])}
up_genes <- gene_convert(up_genes)
down_genes <- gene_convert(down_genes)
return(list(up = up_genes, down = down_genes))
}
#### 药物上下调基因集的获取 ####
get_drug_genes <- function(drug_file,
N = 20,  # select topn & tail n
Corr = 0.95  # select corr >0.95 &<-0.95
){
drug_data <- read.table(drug_file, header = FALSE, row.names = 1)
# 判断是否需要选择 topN 或者 tailN
if (!is.null(N)) {
up_genes <- rownames(head(drug_data, N))
down_genes <- rownames(tail(drug_data, N))
}
if (!is.null(Corr)) {
up_genes <- rownames(drug_data[drug_data$V2 > Corr, ,drop=F])
down_genes <- rownames(drug_data[drug_data$V2 < -Corr, ,drop=F])
}
up_genes <- gene_convert(up_genes)
down_genes <- gene_convert(down_genes)
return(list(up = up_genes, down = down_genes))
}
#### 网络拓扑指标的计算 ####
calculate_metrics <- function(g) {
density <- edge_density(g)
dcentr <- centr_degree(g)$centralization
clocentr <- centr_clo(g, mode = "all")$centralization
betwcentr <- centr_betw(g, directed = FALSE)$centralization
eigencentr <- centr_eigen(g, directed = FALSE)$centralization
spath <- mean_distance(g, directed = FALSE)
cc <- transitivity(g, type = "global")
ad <- mean(degree(g))
metrics <- c(density, dcentr, clocentr, betwcentr, eigencentr, spath, cc, ad)
names(metrics) <- c("density", "dcentr", "clocentr", "betwcentr", "eigencentr", "spath", "cc", "ad")
return(metrics)
}
#### 蛋白互作网络的构建 ####
build_ppi_network <- function(ppi_data,
genes,
protein_mapping,
score_threshold = 400,
reaction = "direct"  # 选择indirect或direct
) {
selected_ppi_data <- ppi_data[ppi_data["combined_score"] >= score_threshold, ]
# 转换基因符号为蛋白名称
mapped_genes <- subset(protein_mapping, subset = symbol %in% genes) %>% .[["ensp"]] %>% paste0("10090.", .)
if(reaction == "direct"){
# 仅保留基因相关的蛋白互作
selected_ppi_data <- selected_ppi_data[selected_ppi_data$protein1 %in% mapped_genes & selected_ppi_data$protein2 %in% mapped_genes, ]}
if(reaction == "indirect"){
# 仅保留基因相关的蛋白互作
selected_ppi_data <- selected_ppi_data[selected_ppi_data$protein1 %in% mapped_genes | selected_ppi_data$protein2 %in% mapped_genes, ]}
# 再次将网络矩阵转变成Gene_symbol
selected_ppi_data$protein1 <- protein_mapping[match(sub("^10090\\.", "", selected_ppi_data$protein1),protein_mapping$ensp),] %>% .[["symbol"]]
selected_ppi_data$protein2 <- protein_mapping[match(sub("^10090\\.", "", selected_ppi_data$protein2),protein_mapping$ensp),] %>% .[["symbol"]]
g <- graph_from_data_frame(selected_ppi_data, directed = FALSE)
return(g)
}
#### 相关性网络的构建 ####
build_corr_network <- function(genes,
disease_file,
reaction = "indirect"  # 选择indirect或direct
) {
if (grepl("Macrophages.*early", disease_file)) {
# 处理 Macropahges+early 文件
print(paste("Processing", disease_file, "with early network"))
network_data <- read.table("./network/Macrophages_5edges.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
} else if (grepl("Macrophages.*late", disease_file)) {
# 处理 Macropahges+late 文件
print(paste("Processing", disease_file, "with late network"))
network_data <- read.table("./network/Macrophages_4edges.tsv",header = TRUE, sep = "\t", stringsAsFactors = FALSE)
}else if (grepl("Fibroblast.*early", disease_file)) {
# 处理 Fibroblast+early 文件
print(paste("Processing", disease_file, "with early network"))
network_data <- read.table("./network/Fibroblast_4edges.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
} else if (grepl("Fibroblast.*late", disease_file)) {
# 处理 Fibroblast+late 文件
print(paste("Processing", disease_file, "with late network"))
network_data <- read.table("./network/Fibroblast_6edges.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
} else if (grepl("Granulocyte.*early", disease_file)) {
# 处理 Granulocyte+early 文件
print(paste("Processing", disease_file, "with early network"))
network_data <- read.table("./network/Granulocyte_2edges.tsv", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
} else {
print(paste("No matching network found for", disease_file))
}
if(reaction == "direct"){
selected_network_data <- network_data[network_data$V1 %in% genes & network_data$V2 %in% genes, ]}
if(reaction == "indirect"){
selected_network_data <- network_data[network_data$V1 %in% genes | network_data$V2 %in% genes, ]}
g <- graph_from_data_frame(selected_network_data, directed = FALSE)
return(g)
}
#### 绘制网络 ####
plot_network <- function(g, title) {
# 获得degree
vertex_degree <- degree(g)
# 生成梯度颜色
colors <- colorRampPalette(c("yellow", "red"))(max(vertex_degree) + 1)
vertex_colors <- colors[vertex_degree + 1]  # 根据度数选择颜色
vertex_labels <- paste(V(g)$name, "\n", "degree: ", vertex_degree, sep="")
# 绘图
plot(g, vertex.label = vertex_labels, vertex.size = vertex_degree * 1.5,  # 缩小节点大小
vertex.color = vertex_colors, edge.arrow.size = 0.3,  # 缩小边箭头大小
main = title, cex = 0.7)  # 调整标签字体大小
}
####删除节点稳健性矩阵生成 ####
delete_nodes_and_calculate_metrics <- function(network,
genes_to_remove_list,
drug_name) {
metrics_list <- list()
# 计算删除前的原始网络指标
original_metrics <- calculate_metrics(network)
metrics_list[["original"]] <- original_metrics
# 删除所有指定的节点并计算网络指标
for (i in seq(1, length(genes_to_remove_list), by = 1)) {
genes_to_remove <- intersect(genes_to_remove_list[[i]], V(network)$name)
g_copy <- delete_vertices(network, genes_to_remove)
plot_network(g_copy, paste("After removing nodes", paste(genes_to_remove, collapse = ", ")))
metrics <- calculate_metrics(g_copy)
metrics_list[[sub("\\.txt","",drug_name[i])]] <- metrics
}
return(metrics_list)
}
#### 将list转换为数据框 ####
con.list_to_df <- function(metrics_list,diff){
if(diff == T){
metrics_df <- do.call(rbind, metrics_list)
rownames(metrics_df) <- names(metrics_list)
baseline <- metrics_df[1, ]
metrics_diff <- sweep(metrics_df, 2, as.numeric(baseline), FUN = "-")
return(as.data.frame(metrics_diff))
}
metrics_df <- do.call(rbind, metrics_list)
rownames(metrics_df) <- names(metrics_list)
return(as.data.frame(metrics_df))
}
#### 定义得分的函数 ####
sort_columns <- function(df,
asc_cols = c("ad", "density", "cc"),
desc_cols = c("spath", "eigencentr", "betwcentr")) {
## 将格式统一为数据框
df <- as.data.frame(df)
## "clocentr", "dcentr"这两个指标不考虑，若考虑和asc列放在一起
# 对指定列进行升序排序
for (col in asc_cols) {
## 处理特殊值
# 将 NA, NaN, -Inf 替换为最小值
df[[col]][is.na(df[[col]]) | df[[col]] == -Inf] <- -666
# 将 Inf 替换为最大值
df[[col]][df[[col]] == Inf] <- 666
# 排序并赋值，越小的值排名越top，赋予的分数越大
ranks <- rank(df[[col]], ties.method = "average")
df[[col]] <- length(ranks) + 1 - ranks
}
# 对指定列进行降序排序
for (col in desc_cols) {
# 将 NA, NaN, Inf 替换为最大值
df[[col]][is.na(df[[col]]) | df[[col]] == Inf] <- 666
# 将 -Inf 替换为最小值
df[[col]][df[[col]] == -Inf] <- -666
# 排序并赋值，越大的值排名越top，赋予的分数越大
ranks <- rank(df[[col]], ties.method = "average")
df[[col]] <- ranks
}
return(df[c(asc_cols,desc_cols)])
}
#### 定义upup downdown updown downup综合排序函数 ####
combine_metrics <- function(upup_metrics_diff_score,
downdown_metrics_diff_score,
updown_metrics_diff_score,
downup_metrics_diff_score) {
# 初始化综合排序数据框
final_metrics_df <- upup_metrics_diff_score  # 复制结构
final_metrics_df[,] <- 0  # 初始化为0
# 对每个药物进行指标的综合计算和选择
for (drug in rownames(final_metrics_df)) {
for (col in colnames(final_metrics_df)) {
# 计算 upup + downdown 和 updown + downup 的值
positive_effect <- upup_metrics_diff_score[drug, col] + downdown_metrics_diff_score[drug, col]
negative_effect <- updown_metrics_diff_score[drug, col] + downup_metrics_diff_score[drug, col]
# 选择综合排序
if (positive_effect > negative_effect) {
final_metrics_df[drug, col] <- positive_effect
} else {
final_metrics_df[drug, col] <- -negative_effect
}
}
}
return(final_metrics_df)
}
#### 定义RRA整合函数 ####
RAA_aggregate_final <- function(final_metrics_df,  # 整合排序的数据框
input_file,        # 输入文件名
N = NA,            # 默认情况下，N 会被自动计算为所有输入排名列表中的唯一元素的数量
method = "RRA") {  # 默认使用 RRA 方法 #其他方法  'mean'
# 选择聚合方法
if ( method == "RRA") {
library(RobustRankAggreg)
prefix <- "RRA_"
# 保留原始行名
original_rownames <- rownames(final_metrics_df)
# 根据文件名确定处理方式
if (grepl("positive", input_file, ignore.case = TRUE)) {
# 对于正效应文件，直接从大到小排名
final_metrics_df <- as.data.frame(lapply(final_metrics_df, function(col) {
(rank(-col, ties.method = "min")/length(col))}))
} else if (grepl("negative", input_file, ignore.case = TRUE)) {
# 对于负效应文件，加上负号后从大到小排名
final_metrics_df <- as.data.frame(lapply(final_metrics_df, function(col) {
(rank(col, ties.method = "min")/length(col))}))
} else {
stop("文件名未能识别为 'positive' 或 'negative'")
}
# 重新赋值行名
rownames(final_metrics_df) <- original_rownames
mat <- as.matrix(final_metrics_df)
# 使用 aggregateRanks 函数进行排名聚合
aggregated_result <- aggregateRanks(rmat = mat, method = "RRA")
# 将聚合结果转换为数据框
aggregated_result$Rank <- rank(aggregated_result$Score, ties.method = "average")
result_df <- as.data.frame(aggregated_result)
}
if ( method == "mean") {
prefix <- "Mean_"
# 计算每行的均值
row_means <- rowMeans(final_metrics_df, na.rm = TRUE)
# 根据文件名判断排序方式
if (grepl("positive", input_file, ignore.case = TRUE)) {
# 对于正效应文件，均值越大，排名越高（即 rank 越小）
ranks <- rank(-row_means, ties.method = "min")
} else if (grepl("negative", input_file, ignore.case = TRUE)) {
# 对于负效应文件，均值越小，排名越高（即 rank 越小）
ranks <- rank(row_means, ties.method = "min")
} else {
stop("文件名未能识别为 'positive' 或 'negative'")
}
# 将排名结果添加为新的列
final_metrics_df$Rank <- ranks
result_df <- final_metrics_df["Rank"]
}
# 生成输出文件名
output_file <- paste0(output_dir,prefix, basename(input_file))
# 输出结果到文件
write.table(result_df, file = output_file, sep = "\t", col.names = TRUE, quote = FALSE)
return(result_df)
}
#### 保存结果到文件的函数 ####
save_metrics_to_file <- function(metrics_df,file_prefix, output_dir) {
file_name <- paste0(output_dir, "/", file_prefix, "_metrics.txt")
write.table(metrics_df, file = file_name, sep = "\t", col.names = T, quote = FALSE)
}
load("human_mart.RData")
load("mouse_mart.RData")
ppi_data <- read.table("C:/Users/huihui1126/Desktop/药物预测方法测试/rob/network/10090.protein.links.v12.0.txt", sep=" ",header=TRUE)
protein_mapping <- read.table("C:/Users/huihui1126/Desktop/药物预测方法测试/rob/network/Mus_ensp2symbol.txt", sep="\t",quote = "",header=T)
#### 主函数  ####
mainrob <- function(disease_files,    ## 疾病文件
drug_files,       ## 药物文件
drug_gene_lists = "drug_gene_lists496.RData", ## 最好提供药物靶点list，包含每个药物的上下调基因
output_dir,       ## 输出文件
ppi_data,         ## ppi网络信息-自带
protein_mapping,  ## 蛋白名映射-自带
save.diff = T,    ## 是否输出结果
PPI = F,          ## 是否构建PPI网络
Corr = T,         ## 是否构建相关性网络-需自己提供/单细胞数据构建Biotip
Rank = T,         ## 是否排序
Combined = T      ## 是否合并upup+downdown 及updown+downup的比较
){
## 进度条设置
total_steps <- length(disease_files)
pb <- progress_bar$new(
format = "Processing [:bar] :percent eta: :eta",
total = total_steps, clear = FALSE, width = 60
)
## 生成所有药物上下调基因列表
if(is.null(drug_gene_lists) == T){
drug_list <- drug_up_list <- drug_down_list <- list()
for (drug_file in drug_files) {
drug_name <- tools::file_path_sans_ext(basename(drug_file))  # 获取文件名并去掉扩展名
drug_list[[drug_name]] <- drug_name
drug_genes <- get_drug_genes(drug_file,N = 600,Corr = NULL)
# 将提取的基因添加到列表中
drug_up_list[[drug_name]] <- drug_genes$up
drug_down_list[[drug_name]] <- drug_genes$down
# print(drug_up_list)
# print(drug_down_list)
}
# 保存 drug_up_list 和 drug_down_list以便于后续重复调用
save(drug_list, drug_up_list, drug_down_list, file = "drug_gene_lists496.RData")}else {
# 如果 drug_gene_lists 文件存在，直接加载它们
load("drug_gene_lists496.RData")
}
i = 6
for (i in 1:length(disease_files)) {
disease_file <- disease_files[i]
## 读取疾病上下调基因集
disease_genes <- get_disease_genes(disease_file)
## 构建疾病上下调基因的PPI网络
if(PPI == TRUE){
up_network <- build_ppi_network(ppi_data, disease_genes$up, protein_mapping,reaction = "indirect")
plot_network(up_network, paste("Orignal"))
down_network <- build_ppi_network(ppi_data, disease_genes$down, protein_mapping,reaction = "indirect")
plot_network(down_network, paste("Orignal"))
}
if(Corr == TRUE){
up_network <- build_corr_network(disease_genes$up, disease_file, reaction = "indirect")
down_network <- build_corr_network(disease_genes$down, disease_file, reaction = "indirect")
# 检查up_network和down_network是否为空
if (ecount(up_network) > 0 && ecount(down_network) > 0) {
plot_network(up_network, paste("Original"))
plot_network(down_network, paste("Original"))
} else {
# 如果网络为空边，使用PPI方法构建网络
if (ecount(up_network) == 0) {
warning("Correlation network for up-regulated genes has no edges, switching to PPI-based network.")
up_network <- build_ppi_network(ppi_data, disease_genes$up, protein_mapping, reaction = "indirect")
plot_network(up_network, paste("PPI-based for Up Genes"))
}
if (ecount(down_network) == 0) {
warning("Correlation network for down-regulated genes has no edges, switching to PPI-based network.")
down_network <- build_ppi_network(ppi_data, disease_genes$down, protein_mapping, reaction = "indirect")
plot_network(down_network, paste("PPI-based for Down Genes"))
}
}
}
## 删除药物节点并计算网络指标
upup_metrics_df <- delete_nodes_and_calculate_metrics(up_network, drug_up_list, names(drug_list)) %>% con.list_to_df(.,diff=F)
downdown_metrics_df <- delete_nodes_and_calculate_metrics(down_network, drug_down_list, names(drug_list)) %>% con.list_to_df(.,diff=F)
updown_metrics_df <- delete_nodes_and_calculate_metrics(up_network, drug_down_list, names(drug_list)) %>% con.list_to_df(.,diff=F)
downup_metrics_df <- delete_nodes_and_calculate_metrics(down_network, drug_up_list, names(drug_list)) %>% con.list_to_df(.,diff=F)
## 删除药物节点并计算网络指标差值
upup_metrics_diff <- delete_nodes_and_calculate_metrics(up_network, drug_up_list, names(drug_list))  %>% con.list_to_df(.,diff=T)
downdown_metrics_diff <- delete_nodes_and_calculate_metrics(down_network, drug_down_list, names(drug_list)) %>% con.list_to_df(.,diff=T)
updown_metrics_diff <- delete_nodes_and_calculate_metrics(up_network, drug_down_list, names(drug_list)) %>% con.list_to_df(.,diff=T)
downup_metrics_diff <- delete_nodes_and_calculate_metrics(down_network, drug_up_list, names(drug_list)) %>% con.list_to_df(.,diff=T)
## 排序-"ad", "density", "cc"升序  "spath", "eigencentr", "betwcentr"降序
if(Rank == T){
upup_metrics_diff_score  <- upup_metrics_diff[-1,] %>% sort_columns(.)
downdown_metrics_diff_score <- downdown_metrics_diff[-1,]  %>% sort_columns(.)
updown_metrics_diff_score <- updown_metrics_diff[-1,]  %>% sort_columns(.)
downup_metrics_diff_score <- downup_metrics_diff[-1,]  %>% sort_columns(.)
}
if(Combined == T){
## 进行综合排序
final_metrics_df <- combine_metrics(upup_metrics_diff_score,
downdown_metrics_diff_score,
updown_metrics_diff_score,
downup_metrics_diff_score)
}
## 输出文件
if(save.diff == T){
## 输出网络指标改变矩阵 ##
output_dir <- "C:/Users/huihui1126/Desktop/药物预测方法测试/rob/output/"
save_metrics_to_file(upup_metrics_diff, paste( basename(disease_file), "upup", sep = "_"), output_dir)
save_metrics_to_file(downdown_metrics_diff, paste(basename(disease_file), "downdown", sep = "_"), output_dir)
save_metrics_to_file(updown_metrics_diff, paste( basename(disease_file), "updown", sep = "_"), output_dir)
save_metrics_to_file(downup_metrics_diff, paste(basename(disease_file), "downup", sep = "_"), output_dir)
}
output_dir <- "C:/Users/huihui1126/Desktop/药物预测方法测试/rob/output/"
save_metrics_to_file(final_metrics_df, paste(basename(disease_file), "final", sep = "_"), output_dir)
## 更新进度条
pb$tick()
}
message("Processing completed!")
#return(upup_metrics_diff)
}
#### 实际DNB操作 ####
disease_files <- list.files("C:/Users/huihui1126/Desktop/药物预测方法测试/rob/diseaselist-deg2function/", full.names = TRUE, pattern = "\\.txt$")
drug_files <- list.files("C:/Users/huihui1126/Desktop/药物预测方法测试/rob/druglist-pos1/", full.names = TRUE, pattern = "\\.txt$")
output_dir <- "C:/Users/huihui1126/Desktop/药物预测方法测试/rob/output/"
for (drug_file in drug_files) {
drug_name <- tools::file_path_sans_ext(basename(drug_file))  # 获取文件名并去掉扩展名
drug_list[[drug_name]] <- drug_name
drug_genes <- get_drug_genes(drug_file,N = 600,Corr = NULL)
# 将提取的基因添加到列表中
drug_up_list[[drug_name]] <- drug_genes$up
drug_down_list[[drug_name]] <- drug_genes$down
# print(drug_up_list)
# print(drug_down_list)
}
drug_list <- drug_up_list <- drug_down_list <- list()
for (drug_file in drug_files) {
drug_name <- tools::file_path_sans_ext(basename(drug_file))  # 获取文件名并去掉扩展名
drug_list[[drug_name]] <- drug_name
drug_genes <- get_drug_genes(drug_file,N = 600,Corr = NULL)
# 将提取的基因添加到列表中
drug_up_list[[drug_name]] <- drug_genes$up
drug_down_list[[drug_name]] <- drug_genes$down
# print(drug_up_list)
# print(drug_down_list)
}
drug_down_list
save(drug_list, drug_up_list, drug_down_list, file = "drug_gene_lists496.RData")
#### 实际DNB操作 ####
disease_files <- list.files("C:/Users/huihui1126/Desktop/药物预测方法测试/rob/diseaselist-deg2function/", full.names = TRUE, pattern = "\\.txt$")
drug_files <- list.files("C:/Users/huihui1126/Desktop/药物预测方法测试/rob/druglist-pos1/", full.names = TRUE, pattern = "\\.txt$")
output_dir <- "C:/Users/huihui1126/Desktop/药物预测方法测试/rob/output/"
mainrob(disease_files,
drug_files,
drug_gene_lists = "drug_gene_lists496.RData",
output_dir,
ppi_data,
protein_mapping,
save.diff = F,
PPI =F,
Corr = T,
Rank = T,
Combined = T)
View(drug_up_list)
drug_up_list[["drug_317"]]
drug_up_list[["drug_316"]]
drug_up_list[["drug_106"]]
drug_up_list
drug_down_list
View(drug_down_list)
drug_down_list[["drug_58"]]
save(drug_list, drug_up_list, drug_down_list, file = "drug_gene_lists496.RData")
# 如果 drug_gene_lists 文件存在，直接加载它们
load("drug_gene_lists.RData")
drug_list
drug_up_list
View(drug_down_list)
drug_down_list
get_drug_genes
drug_data <- read.table(drug_file, header = FALSE, row.names = 1)
drug_data <- drug_data[order(drug_data[, 2], decreasing = TRUE), ]
drug_data
drug_data <- drug_data[order(drug_data[, 1], decreasing = TRUE), ]
drug_data
drug_data <- read.table(drug_file, header = FALSE, row.names = 1)
drug_data <- drug_data[order(drug_data[, 1], decreasing = TRUE), drop = F]
drug_data[order(drug_data[, 1], decreasing = TRUE), ,drop = F]
drug_data <- drug_data[order(drug_data[, 1], decreasing = TRUE), ,drop = F]
up_genes <- rownames(head(drug_data, N))
up_genes
down_genes <- rownames(tail(drug_data, N))
down_genes
get_drug_genes <- function(drug_file,
N = 20,  # select topn & tail n
Corr = 0.95  # select corr >0.95 &<-0.95
){
drug_data <- read.table(drug_file, header = FALSE, row.names = 1)
drug_data <- drug_data[order(drug_data[, 1], decreasing = TRUE), ,drop = F]
# 判断是否需要选择 topN 或者 tailN
if (!is.null(N)) {
up_genes <- rownames(head(drug_data, N))
down_genes <- rownames(tail(drug_data, N))
}
if (!is.null(Corr)) {
up_genes <- rownames(drug_data[drug_data$V2 > Corr, ,drop=F])
down_genes <- rownames(drug_data[drug_data$V2 < -Corr, ,drop=F])
}
up_genes <- gene_convert(up_genes)
down_genes <- gene_convert(down_genes)
return(list(up = up_genes, down = down_genes))
}
for (drug_file in drug_files) {
drug_name <- tools::file_path_sans_ext(basename(drug_file))  # 获取文件名并去掉扩展名
drug_list[[drug_name]] <- drug_name
drug_genes <- get_drug_genes(drug_file,N = 500,Corr = NULL)
# 将提取的基因添加到列表中
drug_up_list[[drug_name]] <- drug_genes$up
drug_down_list[[drug_name]] <- drug_genes$down
# print(drug_up_list)
# print(drug_down_list)
}
drug_up_list
View(drug_up_list)
save(drug_list, drug_up_list, drug_down_list, file = "drug_gene_lists496.RData")
disease_files <- list.files("C:/Users/huihui1126/Desktop/药物预测方法测试/rob/diseaselist-deg2function/", full.names = TRUE, pattern = "\\.txt$")
drug_files <- list.files("C:/Users/huihui1126/Desktop/药物预测方法测试/rob/druglist-pos1/", full.names = TRUE, pattern = "\\.txt$")
output_dir <- "C:/Users/huihui1126/Desktop/药物预测方法测试/rob/output/"
mainrob(disease_files,
drug_files,
drug_gene_lists = "drug_gene_lists496.RData",
output_dir,
ppi_data,
protein_mapping,
save.diff = F,
PPI =F,
Corr = T,
Rank = T,
Combined = T)
save(drug_list, drug_up_list, drug_down_list, file = "drug_gene_lists496.RData")
